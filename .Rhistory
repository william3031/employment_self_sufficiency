clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
rename(lga_pow = local_government_areas_2011_boundaries_pow,
lga_ur = lga) %>% #rename lga
select(-x5) %>%
mutate(year = 2011)
read_csv("data_in/ur_vic_lgas_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
rename(lga_pow = local_government_areas_2011_boundaries_pow,
lga_ur = lga) %>% #rename lga
select(-x5) %>%
mutate(year = 2011)
read_csv("data_in/ur_vic_lgas_2016.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>%
mutate(year = 2016)
read_csv("data_in/ur_other_states_2016.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>% # removes the last column
rename(lga_ur = state_ur) %>%
mutate(year = 2016)
# 2016
vic_lgas_raw_16
combined <- bind_rows(vic_lgas_raw_11,
other_states_raw_11,
vic_lgas_raw_16,
other_states_raw_16)
combined
data_merged <- bind_rows(vic_lgas_raw_11,
other_states_raw_11,
vic_lgas_raw_16,
other_states_raw_16) %>%
select(-counting)
total_jobs_data <- data_merged %>%
group_by(lga_pow) %>%
summarise(total_jobs = sum(count)) %>%
rename(lga = lga_pow)
local_jobs_data <- data_merged %>%
mutate(local_jobs = case_when(lga_ur == lga_pow ~ count,
TRUE ~ NA_real_)) %>%
filter(!is.na(local_jobs)) %>%
select(-count, -lga_pow) %>%
rename(lga = lga_ur)
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess))
total_jobs_data <- data_merged %>%
group_by(lga_pow, year) %>%
summarise(total_jobs = sum(count)) %>%
rename(lga = lga_pow)
total_jobs_data
local_jobs_data
# what is the highest?
ess_data %>%
arrange(desc(ess))
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c(total_jobs, local_jobs), ~as.integer))
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c("total_jobs", "local_jobs"), ~as.integer))
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c("total_jobs", "local_jobs"), ~as.integer(.)))
ess_data
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c("total_jobs", "local_jobs"), ~as.integer(.)),
year = factor(year))
ess_data
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c("total_jobs", "local_jobs"), ~as.integer(.)),
year = factor(year)) %>%
mutate(lga = str_remove_all(lga, "\(.\)"))
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c("total_jobs", "local_jobs"), ~as.integer(.)),
year = factor(year)) %>%
mutate(lga = str_remove_all(lga, "\\(.\)"))
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c("total_jobs", "local_jobs"), ~as.integer(.)),
year = factor(year)) %>%
mutate(lga = str_remove_all(lga, "\\("))
ess_data
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c("total_jobs", "local_jobs"), ~as.integer(.)),
year = factor(year)) %>%
mutate(lga = str_remove_all(lga, "\\(\\."))
ess_data
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c("total_jobs", "local_jobs"), ~as.integer(.)),
year = factor(year)) %>%
mutate(lga = str_remove_all(lga, "[\\(].[\\)]"))
ess_data
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c("total_jobs", "local_jobs"), ~as.integer(.)),
year = factor(year)) %>%
mutate(lga = str_remove_all(lga, "[\\(].*[\\)]"))
ess_data
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c("total_jobs", "local_jobs"), ~as.integer(.)),
year = factor(year)) %>%
mutate(lga = str_remove_all(lga, "[\\(].*[\\)]")) %>%
mutate(lga = str_trim(lga))
ess_data
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c("total_jobs", "local_jobs"), ~as.integer(.)),
year = factor(year)) %>%
mutate(lga = str_remove_all(lga, "[\\(].*[\\)]"),
lga = str_trim(lga))
# export ------------------------------------------------------------------
# as an rds to save the structure
write_rds(ess_data, "./data_out/ess_data.rds")
library(mapshaper)
library(rmapshaper)
# simplify the polygon
lga_simplify <- ms_simplify(lga_vic, 0.25)
# export
write_rds(lga_simplify, path = "./data_out/lga_simplify.rds")
# export
write_rds(lga_simplify, file = "./data_out/lga_simplify.rds")
lga_simplify
library(tidyverse)
# lga file from datavic
lga_vic <- vicmap_query(layer = "datavic:VMADMIN_LGA_POLYGON") %>%
select(LGA_NAME)  %>%
collect() %>%
transmute(lga_name = str_to_title(LGA_NAME))
lga_vic
# simplify the polygon
lga_simplify <- ms_simplify(lga_vic, 0.25)
# export
write_rds(lga_simplify, file = "./data_out/lga_simplify.rds")
library(shinydashboard)
library(tidyverse)
library(sf)
df <- read_rds("data_out/ess_data.rds")
poly <- read_rds("data_out/lga_simplify.rds")
library(shiny)
df
poly
library(leaflet)
list.files("modules")
list.files("modules") %>%
purrr::map(load())
list.files("modules") %>%
purrr::map(load(.))
list.files("modules")
list.files("modules") %>%
purrr::map(source())
list.files("modules") %>%
purrr::map(source(.))
list.files("modules") %>%
purrr::map(~source(.x))
list.files("modules") %>%
purrr::map(~source(.x))
list.files("modules")
list.files("modules") %>%
purrr::map(~source(paste0("modules/", .)))
list.files("modules") %>%
purrr::map(~source(paste0("modules/", .)))
list.files("modules") %>%
purrr::map(~source(paste0("modules/", .)))
runApp()
poly
plot_poly
plot(poly)
library(VicmapR)
library(sf)
library(rmapshaper)
library(tidyverse)
# listLayers(pattern = "lga", ignore.case = T)
# lga file from datavic
lga_vic_raw <- vicmap_query(layer = "datavic:VMADMIN_LGA_POLYGON") %>%
select(LGA_NAME)  %>%
collect()
lga_vic <- lga_raw %>% %>%
transmute(lga_name = str_to_title(LGA_NAME)) %>%
st_transform(4326)
# simplify the polygon
lga_simplify <- ms_simplify(lga_vic, 0.25)
# export
write_rds(lga_simplify, file = "./data_out/lga_simplify.rds")
lga_vic <- lga_raw %>%
transmute(lga_name = str_to_title(LGA_NAME)) %>%
st_transform(4326)
# simplify the polygon
lga_simplify <- ms_simplify(lga_vic, 0.25)
# export
write_rds(lga_simplify, file = "./data_out/lga_simplify.rds")
# lga file from datavic
lga_vic_raw <- vicmap_query(layer = "datavic:VMADMIN_LGA_POLYGON") %>%
select(LGA_NAME)  %>%
collect()
lga_vic <- lga_vic_raw %>%
transmute(lga_name = str_to_title(LGA_NAME)) %>%
st_transform(4326)
# simplify the polygon
lga_simplify <- ms_simplify(lga_vic, 0.25)
# export
write_rds(lga_simplify, file = "./data_out/lga_simplify.rds")
runApp()
initial_poly <- inner_join(poly, df)
initial_poly <- inner_join(poly, df)
df
poly
initial_poly <- inner_join(poly, df %>% filter(year == "2016"),
by = c("lga_name" = "lga"))
initial_poly
runApp()
runApp()
runApp()
poly
poly <- read_rds("data_out/lga_simplify.rds")
poly
runApp()
initial_poly
runApp()
runApp()
lga_vic_raw
lga_vic
st_write(lga_simplify, file = ".data/lga.geojson")
st_write(lga_simplify, ".data/lga.geojson")
st_write(lga_simplify, ".data/lga.json")
st_write(lga_simplify, "./data_out/lga.gpkg")
poly <- st_read("data_out/lga.gpkg")
initial_poly <- inner_join(poly, df %>% filter(year == "2016"),
by = c("lga_name" = "lga"))
runApp()
runApp()
runApp()
runApp()
runApp()
initial_poly
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c("total_jobs", "local_jobs"), ~as.integer(.)),
year = factor(year),lga = str_remove_all(lga, "[\\(].*[\\)]"),
lga = str_trim(lga),
ess = round(ess, 3))
# ess_calculations
# Employment self-sufficency looks at what proportion of local jobs are filled by local residents
# data is from the 2011 and 2016 ABS Censuses
# ur from other states included as there is travel over the borders
# libraries ---------------------------------------------------------------
library(tidyverse)
library(janitor)
# load data ---------------------------------------------------------------
# 2011 data
vic_lgas_raw_11 <- read_csv("data_in/ur_vic_lgas_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
rename(lga_pow = local_government_areas_2011_boundaries_pow,
lga_ur = lga) %>% #rename lga
select(-x5) %>%
mutate(year = 2011)
other_states_raw_11 <- read_csv("data_in/ur_other_states_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>% # removes the last column
rename(lga_pow = local_government_areas_2011_boundaries_pow,
lga_ur = state) %>%
mutate(year = 2011)
# 2016
vic_lgas_raw_16 <- read_csv("data_in/ur_vic_lgas_2016.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>%
mutate(year = 2016)
other_states_raw_16 <- read_csv("data_in/ur_other_states_2016.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>% # removes the last column
rename(lga_ur = state_ur) %>%
mutate(year = 2016)
# combine -----------------------------------------------------------------
data_merged <- bind_rows(vic_lgas_raw_11,
other_states_raw_11,
vic_lgas_raw_16,
other_states_raw_16) %>%
select(-counting)
# all jobs
total_jobs_data <- data_merged %>%
group_by(lga_pow, year) %>%
summarise(total_jobs = sum(count)) %>%
rename(lga = lga_pow)
# jobs that are in the same lga
local_jobs_data <- data_merged %>%
mutate(local_jobs = case_when(lga_ur == lga_pow ~ count,
TRUE ~ NA_real_)) %>%
filter(!is.na(local_jobs)) %>%
select(-count, -lga_pow) %>%
rename(lga = lga_ur)
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c("total_jobs", "local_jobs"), ~as.integer(.)),
year = factor(year),lga = str_remove_all(lga, "[\\(].*[\\)]"),
lga = str_trim(lga),
ess = round(ess, 3))
# what is the highest?
ess_data %>%
arrange(desc(ess))
# export ------------------------------------------------------------------
# as an rds to save the structure
write_rds(ess_data, "./data_out/ess_data.rds")
ess_data
install.packages("shinywidgets")
install.packages("shinyWidgets")
library(shinywidgets)
library(shinywidgets)
library(shinywidgets)
install.packages("shinyWidgets")
library(shinywidgets)
library(shinyWidgets)
shiny::runApp()
initial_poly <- inner_join(poly, df %>% filter(year == "2016"),
by = c("lga_name" = "lga"))
df <- read_rds("data_out/ess_data.rds")
poly <- st_read("data_out/lga.gpkg")
initial_poly <- inner_join(poly, df %>% filter(year == "2016"),
by = c("lga_name" = "lga"))
runApp()
runApp()
runApp()
runApp()
runApp()
glue("LGA: {initial_poly$lga_name}</br>",
"Year: {initial_poly$year}</br>",
"Local jobs: {initial_poly$local_jobs}</br>",
"Total jobs: {initial_poly$total_jobs}</br>",
"ESS: {initial_poly$esss}")
runApp()
glue("LGA: {initial_poly$lga_name}</br>",
"Year: {initial_poly$year}</br>",
"Local jobs: {initial_poly$local_jobs}</br>",
"Total jobs: {initial_poly$total_jobs}</br>",
"ESS: {initial_poly$esss}") %>% lapply(htmltools::HTML)
initial_poly
runApp()
runApp()
runApp()
# simplify the polygon
lga_simplify <- ms_simplify(lga_vic, 0.15)
library(VicmapR)
library(sf)
library(rmapshaper)
library(tidyverse)
# listLayers(pattern = "lga", ignore.case = T)
# lga file from datavic
lga_vic_raw <- vicmap_query(layer = "datavic:VMADMIN_LGA_POLYGON") %>%
select(LGA_NAME) %>%
collect()
lga_vic <- lga_vic_raw %>%
transmute(lga_name = str_to_title(LGA_NAME)) %>%
st_transform(4326)
# simplify the polygon
lga_simplify <- ms_simplify(lga_vic, 0.15)
# export
st_write(lga_simplify, "./data_out/lga.gpkg")
# export
st_write(lga_simplify, "./data_out/lga.gpkg", delete_layer = TRUE)
runApp()
runApp()
# simplify the polygon
lga_simplify <- ms_simplify(lga_vic, 0.05)
# export
st_write(lga_simplify, "./data_out/lga.gpkg", delete_layer = TRUE)
runApp()
runApp()
runApp()
# ess_calculations
# Employment self-sufficency looks at what proportion of local jobs are filled by local residents
# data is from the 2011 and 2016 ABS Censuses
# ur from other states included as there is travel over the borders
# libraries ---------------------------------------------------------------
library(tidyverse)
library(janitor)
# load data ---------------------------------------------------------------
# 2011 data
vic_lgas_raw_11 <- read_csv("data_in/ur_vic_lgas_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
rename(lga_pow = local_government_areas_2011_boundaries_pow,
lga_ur = lga) %>% #rename lga
select(-x5) %>%
mutate(year = 2011)
other_states_raw_11 <- read_csv("data_in/ur_other_states_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>% # removes the last column
rename(lga_pow = local_government_areas_2011_boundaries_pow,
lga_ur = state) %>%
mutate(year = 2011)
# 2016
vic_lgas_raw_16 <- read_csv("data_in/ur_vic_lgas_2016.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>%
mutate(year = 2016)
other_states_raw_16 <- read_csv("data_in/ur_other_states_2016.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>% # removes the last column
rename(lga_ur = state_ur) %>%
mutate(year = 2016)
# combine -----------------------------------------------------------------
data_merged <- bind_rows(vic_lgas_raw_11,
other_states_raw_11,
vic_lgas_raw_16,
other_states_raw_16) %>%
select(-counting)
# all jobs
total_jobs_data <- data_merged %>%
group_by(lga_pow, year) %>%
summarise(total_jobs = sum(count)) %>%
rename(lga = lga_pow)
data_merged %>%
mutate(local_jobs = case_when(lga_ur == lga_pow ~ count,
TRUE ~ NA_real_))
total_jobs_data
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data, by = c("lga", "year")) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c("total_jobs", "local_jobs"), ~as.integer(.)),
year = factor(year),lga = str_remove_all(lga, "[\\(].*[\\)]"),
lga = str_trim(lga),
ess = round(ess, 3))
# jobs that are in the same lga
local_jobs_data <- data_merged %>%
mutate(local_jobs = case_when(lga_ur == lga_pow ~ count,
TRUE ~ NA_real_)) %>%
filter(!is.na(local_jobs)) %>%
select(-count, -lga_pow) %>%
rename(lga = lga_ur)
# join and calculate
ess_data <- left_join(total_jobs_data, local_jobs_data, by = c("lga", "year")) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess)) %>%
select(lga, total_jobs, year, local_jobs, ess) %>%
mutate(across(c("total_jobs", "local_jobs"), ~as.integer(.)),
year = factor(year),lga = str_remove_all(lga, "[\\(].*[\\)]"),
lga = str_trim(lga),
ess = round(ess, 3))
# what is the highest?
ess_data %>%
arrange(desc(ess))
# export ------------------------------------------------------------------
# as an rds to save the structure
write_rds(ess_data, "./data_out/ess_data.rds")
runApp()
df <- read_rds("data_out/ess_data.rds")
poly <- st_read("data_out/lga.gpkg")
df
left_join(total_jobs_data, local_jobs_data, by = c("lga", "year"))
total_jobs_data
data_merged %>%
group_by(lga_pow, year)
data_merged

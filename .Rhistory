#load_data
pacman::p_load(tidyverse)
vic_lgas <- read_csv("data_in/vic_lgas.csv")
vic_lgas <- read_csv("data_in/ur_vic_lgas.csv")
vic_lgas
vic_lgas <- read_csv("data_in/ur_vic_lgas.csv", skip = 6)
#load_data
pacman::p_load(tidyverse, janitor)
View(vic_lgas)
vic_lgas <- read_csv("data_in/ur_vic_lgas.csv", skip = 7)
vic_lgas <- read_csv("data_in/ur_vic_lgas.csv", skip = 9)
vic_lgas
vic_lgas <- read_csv("data_in/ur_vic_lgas.csv", skip = 9) %>%
clean_names()
vic_lgas
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(counting == "Persons Aged 15 Years and Over") %>% # removes cols at the end
select(-x5) # removes the last column
other_states_raw <- read_csv("data_in/ur_other_states.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(counting == "Persons Aged 15 Years and Over") %>% # removes cols at the end
select(-x5) # removes the last column
other_states_raw
read_csv("data_in/ur_other_states.csv", skip = 9)
read_csv("data_in/ur_other_states.csv", skip = 9) %>% #removes cols at the start
clean_names()
read_csv("data_in/ur_other_states.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(counting == "Persons Aged 15 Years and Over")
read_csv("data_in/ur_other_states.csv", skip = 9) %>% #removes cols at the start
clean_names()
vic_lgas_raw
View(vic_lgas_raw)
#raw data
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) # removes the last column
vic_lgas_raw
other_states_raw <- read_csv("data_in/ur_other_states.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) # removes the last column
other_states_raw
#merged
data <- bind_rows(vic_lgas_raw, other_states_raw)
data
other_states_raw <- read_csv("data_in/ur_other_states.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>% # removes the last column
rename(lga_ur = state_ur)
#merged
data <- bind_rows(vic_lgas_raw, other_states_raw)
data
#merged
data_merged <- bind_rows(vic_lgas_raw, other_states_raw) %>%
select(-counting)
data_merged
data_merged %>%
group_by(lga_pow) %>%
summarise(total_jobs = sum(count))
total_jobs <- data_merged %>%
group_by(lga_pow) %>%
summarise(total_jobs = sum(count))
data_merged
data_merged %>%
mutate(local_jobs = case_when(lga_ur == lga_pow ~ count,
TRUE ~ NA_integer_))
data_merged %>%
mutate(local_jobs = case_when(lga_ur == lga_pow ~ count,
TRUE ~ NA_real_))
data_merged %>%
mutate(local_jobs = case_when(lga_ur == lga_pow ~ count,
TRUE ~ NA_real_)) %>%
filter(!is.na(local_jobs))
data_merged %>%
mutate(local_jobs = case_when(lga_ur == lga_pow ~ count,
TRUE ~ NA_real_)) %>%
filter(!is.na(local_jobs)) %>%
select(-count)
total_jobs_data <- data_merged %>%
group_by(lga_pow) %>%
summarise(total_jobs = sum(count))
local_jobs_data <- data_merged %>%
mutate(local_jobs = case_when(lga_ur == lga_pow ~ count,
TRUE ~ NA_real_)) %>%
filter(!is.na(local_jobs)) %>%
select(-count)
total_jobs_data
local_jobs_data
total_jobs_data
total_jobs_data <- data_merged %>%
group_by(lga_pow) %>%
summarise(total_jobs = sum(count)) %>%
rename(lga = lga_pow)
local_jobs_data
local_jobs_data <- data_merged %>%
mutate(local_jobs = case_when(lga_ur == lga_pow ~ count,
TRUE ~ NA_real_)) %>%
filter(!is.na(local_jobs)) %>%
select(-count, -lga_pow) %>%
rename(lga = lga_ur)
local_jobs_data
# joined
ess_data <- left_join(total_jobs_data, local_jobs_data)
ess_data
# joined
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs)
ess_data
# joined
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
# joined
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
write_csv("data_out/ess_data_2016_census.csv")
# joined
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
write_csv("data_out/ess_data_2016_census.csv")
# joined
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess))
ess_data
#export
write_csv("data_out/ess_data_2016_census.csv")
# what is the highest?
ess_data %>%
arrange(desc(ess))
#export
write_csv("data_out/ess_data_2016_census.csv")
#export
write_csv(ess_data, "data_out/ess_data_2016_census.csv")
usethis::use_git()
1
usethis::use_github()
# what is the highest?
ess_data %>%
arrange(desc(ess))
#load_data
pacman::p_load(tidyverse, janitor)
# what is the highest?
ess_data %>%
arrange(desc(ess))
#merged
data_merged <- bind_rows(vic_lgas_raw, other_states_raw) %>%
select(-counting)
# Employment self-sufficency looks at what proportion of local jobs are filled by local residents
# data is from the 2016 ABS Census
# ur from other states included as there is travel over the borders
#load_data
pacman::p_load(tidyverse, janitor)
#raw data
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) # removes the last column
other_states_raw <- read_csv("data_in/ur_other_states.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>% # removes the last column
rename(lga_ur = state_ur) # renamed to match
#merged
data_merged <- bind_rows(vic_lgas_raw, other_states_raw) %>%
select(-counting)
total_jobs_data <- data_merged %>%
group_by(lga_pow) %>%
summarise(total_jobs = sum(count)) %>%
rename(lga = lga_pow)
local_jobs_data <- data_merged %>%
mutate(local_jobs = case_when(lga_ur == lga_pow ~ count,
TRUE ~ NA_real_)) %>%
filter(!is.na(local_jobs)) %>%
select(-count, -lga_pow) %>%
rename(lga = lga_ur)
# joined
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess))
# what is the highest?
ess_data %>%
arrange(desc(ess))
#export
write_csv(ess_data, "data_out/ess_data_2016_census.csv")
# Employment self-sufficency looks at what proportion of local jobs are filled by local residents
# data is from the 2011 ABS Census
# ur from other states included as there is travel over the borders
#load_data
pacman::p_load(tidyverse, janitor)
#raw data
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) # removes the last column
other_states_raw <- read_csv("data_in/ur_other_states_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>% # removes the last column
rename(lga_ur = state_ur) # renamed to match
#merged
data_merged <- bind_rows(vic_lgas_raw, other_states_raw) %>%
select(-counting)
total_jobs_data <- data_merged %>%
group_by(lga_pow) %>%
summarise(total_jobs = sum(count)) %>%
rename(lga = lga_pow)
local_jobs_data <- data_merged %>%
mutate(local_jobs = case_when(lga_ur == lga_pow ~ count,
TRUE ~ NA_real_)) %>%
filter(!is.na(local_jobs)) %>%
select(-count, -lga_pow) %>%
rename(lga = lga_ur)
# joined
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess))
# what is the highest?
ess_data %>%
arrange(desc(ess))
#export
write_csv(ess_data, "data_out/ess_data_2011_census.csv")
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) # removes the last column
other_states_raw <- read_csv("data_in/ur_other_states_2011.csv", skip = 9)
pacman::p_load(tidyverse, janitor)
other_states_raw <- read_csv("data_in/ur_other_states_2011.csv", skip = 9)
other_states_raw
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas_2011.csv", skip = 9) %>% #removes cols at the start
clean_names()
vic_lgas_raw
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5)
vic_lgas_raw
other_states_raw <- read_csv("data_in/ur_other_states_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5)
other_states_raw
#raw data
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
rename(lga_pow = local_government_areas_2011_boundaries_pow) %>% #pow needs to be renamed
select(-x5) # removes the last column
# Employment self-sufficency looks at what proportion of local jobs are filled by local residents
# data is from the 2011 ABS Census
# ur from other states included as there is travel over the borders
#load_data
pacman::p_load(tidyverse, janitor)
#raw data
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
rename(lga_pow = local_government_areas_2011_boundaries_pow) %>% #pow needs to be renamed
select(-x5) # removes the last column
other_states_raw <- read_csv("data_in/ur_other_states_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>% # removes the last column
rename(lga_pow = local_government_areas_2011_boundaries_pow) %>% #pow needs to be renamed
rename(lga_ur = state_ur) # renamed to match
#merged
data_merged <- bind_rows(vic_lgas_raw, other_states_raw) %>%
select(-counting)
total_jobs_data <- data_merged %>%
group_by(lga_pow) %>%
summarise(total_jobs = sum(count)) %>%
rename(lga = lga_pow)
local_jobs_data <- data_merged %>%
mutate(local_jobs = case_when(lga_ur == lga_pow ~ count,
TRUE ~ NA_real_)) %>%
filter(!is.na(local_jobs)) %>%
select(-count, -lga_pow) %>%
rename(lga = lga_ur)
# joined
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess))
# what is the highest?
ess_data %>%
arrange(desc(ess))
#export
write_csv(ess_data, "data_out/ess_data_2011_census.csv")
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
rename(lga_pow = local_government_areas_2011_boundaries_pow) %>% #pow needs to be renamed
select(-x5) # removes the last column
other_states_raw <- read_csv("data_in/ur_other_states_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>% # removes the last column
rename(lga_pow = local_government_areas_2011_boundaries_pow) %>% #pow needs to be renamed
rename(lga_ur = state_ur) # renamed to match
#merged
data_merged <- bind_rows(vic_lgas_raw, other_states_raw) %>%
select(-counting)
data_merged
pacman::p_load(tidyverse, janitor)
#raw data
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas_2016.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) # removes the last column
other_states_raw <- read_csv("data_in/ur_other_states_2016.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>% # removes the last column
rename(lga_ur = state_ur) # renamed to match
#merged
data_merged <- bind_rows(vic_lgas_raw, other_states_raw) %>%
select(-counting)
data_merged
other_states_raw <- read_csv("data_in/ur_other_states_2011.csv", skip = 9) %>% #removes cols at the start
clean_names()
other_states_raw
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
rename(lga_pow = local_government_areas_2011_boundaries_pow) %>% #pow needs to be renamed
select(-x5) # removes the last column
other_states_raw <- read_csv("data_in/ur_other_states_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>% # removes the last column
rename(lga_pow = local_government_areas_2011_boundaries_pow) %>% #pow needs to be renamed
rename(lga_ur = state_ur) # renamed to match
#merged
data_merged <- bind_rows(vic_lgas_raw, other_states_raw) %>%
select(-counting)
data_merged
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas_2011.csv", skip = 9) %>% #removes cols at the start
clean_names()
vic_lgas_raw
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
rename(lga_pow = local_government_areas_2011_boundaries_pow) %>% #pow needs to be renamed
select(-x5)
vic_lgas_raw
data_merged
#raw data
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas_2016.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) # removes the last column
other_states_raw <- read_csv("data_in/ur_other_states_2016.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>% # removes the last column
rename(lga_ur = state_ur) # renamed to match
#merged
data_merged <- bind_rows(vic_lgas_raw, other_states_raw) %>%
select(-counting)
data_merged
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
rename(lga_pow = local_government_areas_2011_boundaries_pow) %>% #pow needs to be renamed
rename(lga_ur = lga) %>% #rename lga
select(-x5) # removes the last column
other_states_raw <- read_csv("data_in/ur_other_states_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>% # removes the last column
rename(lga_pow = local_government_areas_2011_boundaries_pow) %>% #pow needs to be renamed
rename(lga_ur = state_ur) # renamed to match
#merged
data_merged <- bind_rows(vic_lgas_raw, other_states_raw) %>%
select(-counting)
#merged
data_merged
# Employment self-sufficency looks at what proportion of local jobs are filled by local residents
# data is from the 2011 ABS Census
# ur from other states included as there is travel over the borders
#load_data
pacman::p_load(tidyverse, janitor)
#raw data
vic_lgas_raw <- read_csv("data_in/ur_vic_lgas_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
rename(lga_pow = local_government_areas_2011_boundaries_pow) %>% #pow needs to be renamed
rename(lga_ur = lga) %>% #rename lga
select(-x5) # removes the last column
other_states_raw <- read_csv("data_in/ur_other_states_2011.csv", skip = 9) %>% #removes cols at the start
clean_names() %>%
filter(!is.na(counting)) %>% # removes cols at the end
select(-x5) %>% # removes the last column
rename(lga_pow = local_government_areas_2011_boundaries_pow) %>% #pow needs to be renamed
rename(lga_ur = state_ur) # renamed to match
#merged
data_merged <- bind_rows(vic_lgas_raw, other_states_raw) %>%
select(-counting)
total_jobs_data <- data_merged %>%
group_by(lga_pow) %>%
summarise(total_jobs = sum(count)) %>%
rename(lga = lga_pow)
local_jobs_data <- data_merged %>%
mutate(local_jobs = case_when(lga_ur == lga_pow ~ count,
TRUE ~ NA_real_)) %>%
filter(!is.na(local_jobs)) %>%
select(-count, -lga_pow) %>%
rename(lga = lga_ur)
# joined
ess_data <- left_join(total_jobs_data, local_jobs_data) %>%
mutate(ess = local_jobs/total_jobs) %>%
filter(!is.na(ess))
# what is the highest?
ess_data %>%
arrange(desc(ess))
#export
write_csv(ess_data, "data_out/ess_data_2011_census.csv")
